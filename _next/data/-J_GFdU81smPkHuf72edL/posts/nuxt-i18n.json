{"pageProps":{"frontmatter":{"title":"Adding internationalization to your Nuxt.js applications","description":"","date":"2019-06-11","slug":"/posts/nuxt-i18n","isPublished":true},"content":"\nImplementing internationalization (commonly known as `i18n`) is often feared by a lot of Front-End developers. Setting it up, adding new languages on the fly & UX are often main concerns when it comes to it.\n\nThankfully, [Nuxt.js](https://nuxtjs.org) makes the whole process extremely easy. In this short post, I'll cover how to set up i18n for a Nuxt application, step by step.\n\nThe finished product can be found on Codesandbox [here](https://codesandbox.io/s/nuxt-i18n-example-sppzc).\n\n### Step 1: Installing `vue-i18n` and setting it up\n\nWe'll use the well known [vue-i18n](https://github.com/kazupon/vue-i18n) package to handle internationalization.\n\nStart by installing it:\n\n```bash\n# Using npm\nnpm install vue-i18n\n\n# Using yarn\nyarn add vue-i18n\n```\n\nThen, define it as a plugin in our configuration file:\n\n```js\n// nuxt.config.js\n\nexport default {\n  // ...\n\n  plugins: [\"~/plugins/i18n.js\"],\n\n  // ...\n};\n```\n\nWe now need to create the aforementioned `i18n.js` file that will configure our plugin:\n\n```js\n// plugins/i18n.js\n\nimport Vue from \"vue\";\nimport VueI18n from \"vue-i18n\";\n\n// Tell Vue to use our plugin\nVue.use(VueI18n);\n\nexport default ({ app }) => {\n  // Set the i18n instance on app\n  // This way we can use it globally in our components through this.$i18n\n  app.i18n = new VueI18n({\n    // Set the initial locale\n    locale: \"en\",\n\n    // Set the fallback locale in case the current locale can't be found\n    fallbackLocale: \"en\",\n\n    // Associate each locale to a content file\n    messages: {\n      en: require(\"~/static/content-en.json\"),\n      fr: require(\"~/static/content-fr.json\"),\n    },\n  });\n};\n```\n\nDon't forget to create your `json` files that will contain your textual values for each language. In our case, we could have:\n\n```json\n// static/content-en.json\n{\n  \"title\": \"Hello, how are you?\"\n}\n```\n\nand\n\n```json\n// static/content-fr.json\n{\n  \"title\": \"Bonjour, comment allez-vous?\"\n}\n```\n\nWe'll be able to access each one of these values in our components like so:\n\n```js\n// Will return the correct string based on the current locale\nthis.$t(\"title\");\n```\n\n### Step 2: Changing our locale on the fly\n\nAll we have to do is update the `i18n` context object's `locale` attribute when we need to change the language.\n\nHere's a method that takes care of it:\n\n```js\nchangeLanguage(lang) {\n  // Change the i18n context object's locale\n  // This makes it so the correct locale file is used\n  this.$i18n.locale = lang;\n}\n```\n\nAnd here's this method used in the context of a component:\n\n```html\n<template>\n  <section>\n    <h1>{{ title }}</h1>\n\n    <div>\n      <button @click=\"changeLanguage('en')\">EN</button>\n      <button @click=\"changeLanguage('fr')\">FR</button>\n    </div>\n  </section>\n</template>\n\n<script>\n  export default {\n    computed: {\n      title() {\n        // this.$t(\"title\") returns the value of our title attribute in our JSON file\n        // The correct file is selected based on the locale value\n        // If it was an object, we could access its attributes like so: this.$t(\"myObject\").myAttribute\n        return this.$t(\"title\");\n      },\n    },\n    methods: {\n      /**\n       * Called when a language button is clicked\n       * Changes the i18n context variable's locale to the one selected\n       */\n      changeLanguage(lang) {\n        this.$i18n.locale = lang;\n      },\n    },\n  };\n</script>\n```\n\n### Step 3: Wait, there's no step 3?\n\nYeah, that's pretty much all you need to know to handle i18n in a Nuxt application.  \nOf course, there are many ways of customizing your user experience as can be seen in the official [documentation](https://kazupon.github.io/vue-i18n/introduction.html).\n\nI hope this has helped some of you figure our i18n in the context of your Nuxt projects.  \nFeel free to follow me to get a heads up on any future articles I'll write about Javascript, React, Vue & CSS.\n\n[Twitter](https://twitter.com/christo_kade) is definitely the best place to see what I have to share on a daily basis, so feel free to ðŸ‘‹ at me there.\n"},"__N_SSG":true}