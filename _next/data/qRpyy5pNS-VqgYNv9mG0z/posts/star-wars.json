{"pageProps":{"frontmatter":{"title":"Developing the Star Wars opening crawl in HTML/CSS","description":"I have a bad feeling about this.","date":"2018-01-15","slug":"/posts/star-wars","isPublished":true},"content":"\nTo celebrate **Star Wars: The Last Jedi** coming to theaters I decided to implement a fun easter egg on my [personal website](https://christopherkade.com/).\n\nI wanted to display the saga's famous [opening crawl](http://starwars.wikia.com/wiki/Opening_crawl) when a user inputs the [Konami Code](https://en.wikipedia.org/wiki/Konami_Code).\n\nThis blog post will show every step that was necessary to achieve it, from building it in HTML/CSS, to implementing it in an Angular project and adding final touches such as John Williams' famous track.\n\n<br><br>\n\n# First step: Catching the Konami Code\n\nI decided to catch my user's input from the root component of my website: the `AppComponent`.\n\nI headed over to `app.component.ts` and added the following:\n\n```typescript\n// The Konami Code itself\nkonamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];\n\n// Our user's position in the code\nkonamiCodePosition = 0;\n\n// True once the code is valid, false otherwise\nvalidCode = false;\n\n// Catch keydown events\n@HostListener('document:keydown', ['$event'])\nhandleKeyboardEvent(event: KeyboardEvent) {\n  var requiredKey = this.konamiCode[this.konamiCodePosition];\n\n  // If the input equals to the required key\n  if (event.key == requiredKey) {\n    // Go to the next step of the Konami code\n    this.konamiCodePosition++;\n\n    // If we are at the end of it, validate the code and reset the position to 0\n    if (this.konamiCodePosition == this.konamiCode.length) {\n      this.validCode = true;\n      this.konamiCodePosition = 0;\n    }\n  } else {\n    // The input was false, set the validity to false and the position to 0\n    this.validCode = false;\n    this.konamiCodePosition = 0;\n  }\n}\n```\n\nPretty simple, huh? This could be done in many other and better ways, but that will do the trick.\n\n<br><br>\n\n# Second step: Displaying the right component\n\nOnce the code has been validated, I wish to display the component that will contain the crawl itself.\n\nFirstly, I create the new component:  \n`ng g component star-wars`\n\nThen I use the Angular directive `*ngIf` to hide or display it.\n\nIn `app.component.html`:\n\n```html\n<div class=\"parent\" *ngIf=\"!validCode\">\n  <router-outlet></router-outlet>\n</div>\n\n<app-star-wars *ngIf=\"validCode\"></app-star-wars>\n```\n\nAs you can see, if the code is invalid we display the website's usual content (the `router-outlet`) otherwise we display our newly created component !\n\n<br><br>\n\n# Third step: Creating the crawl\n\nThis was tricky at first, but once you break it down into several parts it becomes easy to understand.\n\nThe crawl contains 5 essential elements:\n\n- The background\n- The intro phrase\n- The logo\n- The text\n- The music\n\nAll of these steps take place in the newly created `StarWarsComponent`.\n\n<br>\n\n## Creating the background\n\nLet's do something a bit more original than adding a picture of space. Let's generate stars randomly !\n\nIn `star-wars.component.html`:\n\n```html\n<div id=\"space\"></div>\n```\n\nAnd in `star-wars.component.ts`:\n\n```typescript\n// Sets the number of stars we wish to display\nreadonly numStars = 100;\n\n// Inject what we need to access the native document variable\nconstructor(@Inject(DOCUMENT) private document: any) { }\n\nngOnInit() {\n  // For every star we want to display\n  for (let i = 0; i < this.numStars; i++) {\n    // Create a new element\n    let star = this.document.createElement(\"div\");\n    // Set its style to resemble a star\n    star.style.position = \"absolute\";\n    star.style.width = \"1px\";\n    star.style.height = \"1px\";\n    star.style.backgroundColor = \"white\";\n    // Get random positions on the screen and set them\n    var xy = this.getRandomPosition();\n    star.style.top = xy[0] + 'px';\n    star.style.left = xy[1] + 'px';\n    // Append our new star\n    this.document.getElementById(\"space\").append(star);\n  }\n}\n\n// Gets random x, y values based on the size of the container\ngetRandomPosition() {\n  var y = window.innerWidth;\n  var x = window.innerHeight;\n  var randomX = Math.floor(Math.random()*x);\n  var randomY = Math.floor(Math.random()*y);\n  return [randomX,randomY];\n}\n```\n\nAnd finally in `star-wars.component.sass`:\n\n```css\n#space\n    background-color: black\n    width: 100%\n    height: 100%\n    position: absolute\n```\n\n**Tada !** We now have a beautiful background to display the crawl on.\n\nIt looks like this (note that the stars might not be visible on these pictures as they are a single pixel wide):\n\n<p align=\"center\">\n  <img width=\"90%\" height=\"90%\" src=\"https://user-images.githubusercontent.com/15229355/34257748-c9afcda8-e663-11e7-8b3b-c9a0e0bd9119.png\">\n</p>\n\n<br>\n\n## Adding the famous intro phrase\n\n> A long time ago in a galaxy far, far away....\n\nEveryone has already heard, seen or whispered this phrase in their lifetime, so let's add it to our component (with the necessary effects).\n\nIn `star-wars.component.html`:\n\n```html\n...\n\n<section class=\"intro\">\n  A long time ago, in a galaxy far,<br />\n  far away....\n</section>\n```\n\nIn `star-wars.component.sass`:\n\n```css\n...\n\n// Center the section element\nsection\n    position: absolute\n    top: 45%\n    left: 50%\n    z-index: 1\n\n// Set the animation, color, size and hide the text\n.intro\n    animation: intro 6s ease-out 1s\n    margin: 0 0 0 (- 15em / 2)\n    color: rgb(75, 213, 238)\n    font-weight: 400\n    font-size: 300%\n    width: 15em\n    opacity: 0\n\n@keyframes intro\n    0%\n        opacity: 0\n    20%\n        opacity: 1\n    90%\n        opacity: 1\n    100%\n        opacity: 0\n```\n\nResult:\n\n<p align=\"center\">\n  <img width=\"90%\" height=\"90%\" src=\"https://user-images.githubusercontent.com/15229355/34257979-c9982382-e664-11e7-8453-8ed19a800c4c.png\">\n</p>\n\n<br>\n\n## Displaying the logo\n\nThe logo is vital to this opening sequence, here's how I added it.\n\nIn `star-wars.component.html`:\n\n```html\n...\n\n<section class=\"logo\">\n  <!-- SVG GOES HERE -->\n</section>\n```\n\nThe `SVG` being a very long file, I have uploaded it [here](https://gist.github.com/christopherkade/97fd94f20c3a4ffddfa5aba46261082f) for you to copy and paste.\n\nIn `star-wars.component.sass`:\n\n```css\n...\n\n// Set the animation & hide the logo\n.logo\n    animation: logo 9s ease-out 9s\n    margin: 0 0 0 (- 18em / 2)\n    opacity: 0\n\n    svg\n        width: inherit\n\n// Scale the logo down and maintain it centered\n@keyframes logo\n    0%\n        width: 18em\n        margin: (- 18em / 2) 0 0 (- 18em / 2)\n        transform: scale(2.75)\n        opacity: 1\n    50%\n        opacity: 1\n        width: 18em\n        margin: (- 18em / 2) 0 0 (- 18em / 2)\n    100%\n        opacity: 0\n        transform: scale(0.1)\n        width: 18em\n        margin: (- 18em / 2) 0 0 (- 18em / 2)\n```\n\nAnd there we go, our beautifully animated logo:\n\n<p align=\"center\">\n  <img width=\"90%\" height=\"90%\" src=\"https://user-images.githubusercontent.com/15229355/34258253-ced4043c-e665-11e7-9393-3fe729f29a57.png\">\n</p>\n\n<br>\n\n## Adding the scrolling text\n\nIt's probably the most essential part of the crawl but it's rather easy to implement.\n\nIn `star-wars.component.html`:\n\n```html\n...\n\n<!-- Change the text to your liking -->\n<div id=\"board\">\n  <div id=\"content\">\n    <p id=\"title\">Episode I</p>\n    <p id=\"subtitle\">THE CODER'S MENACE</p>\n    <br />\n    <!-- And make it cheesy ! -->\n    <p>\n      Turmoil has engulfed the Galactic Republic as Christopher Kade finishes\n      studying to become a master in his trade.\n    </p>\n    <p>\n      Hoping to resolve the matter with side-projects and research, he retreated\n      to the small planet of Ireland for the coming year.\n    </p>\n    <p>\n      As his skills keep on evolving through constant learnings, his passion for\n      open-source technologies grows with it...\n    </p>\n  </div>\n</div>\n```\n\nIn `star-wars.component.sass`:\n\n```css\n...\n\np\n  color: #FFFF82\n\n// Set the font, lean the board, position it\n#board\n  font-family: Century Gothic, CenturyGothic, AppleGothic, sans-serif\n  transform: perspective(300px) rotateX(25deg)\n  transform-origin: 50% 100%\n  text-align: justify\n  position: absolute\n  margin-left: -9em\n  font-weight: bold\n  overflow: hidden\n  font-size: 350%\n  height: 50em\n  width: 18em\n  bottom: 0\n  left: 50%\n  &:after\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 0%, transparent 100%)\n    pointer-events: none\n    position: absolute\n    content: ' '\n    bottom: 60%\n    left: 0\n    right: 0\n    top: 0\n\n// Set the scrolling animation and position it\n#content\n  animation: scroll 100s linear 16s\n  position: absolute\n  top: 100%\n\n#title, #subtitle\n  text-align: center\n\n@keyframes scroll\n    0%\n        top: 100%\n    100%\n        top: -170%\n```\n\nAnd there we go !\n\n<p align=\"center\">\n  <img width=\"90%\" height=\"90%\" src=\"https://user-images.githubusercontent.com/15229355/34258462-bafd09a8-e666-11e7-8002-72b1ad71d343.png\">\n</p>\n\n<br>\n\n## Final touch: the music\n\nWhat would Star Wars be without its music?\n\nSince we have timed our animations in advance, it should be a piece of cake !\n\nFirst, download the [following](https://s.cdpn.io/1202/Star_Wars_original_opening_crawl_1977.mp3) `.mp3` file and add it to your project's assets.\n\nThen, in our `html` file, add:\n\n```html\n<audio preload=\"auto\" autoplay>\n  <source\n    src=\"./../../assets/audio/Star_Wars_original_opening_crawl_1977.mp3\"\n    type=\"audio/mpeg\"\n  />\n</audio>\n```\n\nWhich preloads the music as the page is loaded and plays it automatically.\n\nAnd voilà, everything should work as expected.\n\n# Final thoughts\n\nYou can check out the final product on my [website](https://christopherkade.com/) by inputing the Konami Code (OUTDATED).\nIt really was a blast to develop and I hope it shows how much possibilities you have with such a basic kit.\n\nThanks for reading,  \n[@christo_kade](https://twitter.com/christo_kade)\n"},"__N_SSG":true}