{"pageProps":{"frontmatter":{"title":"Serving your Github pages custom domain using HTTPS","description":"The green lock of trust is vital from now on.","date":"2017-12-06","slug":"/posts/ssh-githubpages","isPublished":true},"content":"\nAfter deploying my new web-tool (namely [Snippet](https://snippet.christopherkade.com/)) I figured it would be time to finally add SSL to my domain. Even though no data leaves or enters my website, I find the green lock of trust to be reassuring and a norm on the web, and so do most users today.\n\nI started by **only** using AWS services, but then realized I could cut some costs by using Cloudflare's free plan.\n\nIn short, I needed:\n\n- Cloudflare\n- AWS Route 53\n\nI had:\n\n- A custom domain working through HTTP\n- Custom sub-domains\n\n<br><br>\n\n## Step 1: Setting up Cloudflare\n\nWe'll be using Cloudflare as our new DNS (coming from AWS Route 53), to use and force HTTPS.\n\nTo do so, head out to [Cloudflare](https://www.cloudflare.com/)'s website, create an account and set up your website by providing your domain; in my case `christopherkade.com`.\n\n<br>\n\n#### Using Cloudflare as our DNS\n\nCloudflare will then scan your existing DNS configurations and display the records they found, in my case, they found most of them, namely my `A` records and one of my sub-domain's `CNAME` record, like such:\n\n<p align=\"center\">\n  <img width=\"70%\" height=\"70%\" src=\"https://user-images.githubusercontent.com/15229355/33068859-7d471316-ceaa-11e7-930b-8c19b9e8f5fe.png\">\n</p>\n\nI then proceeded to add the missing records and most importantly to add a `CNAME` record with `www` as its name and an alias to `username.github.io` as its value. This way, when navigating to `www.christopherkade.com`, you'll be redirected right away to `christopherkade.github.io`. Here's the final records:\n\n<p align=\"center\">\n  <img width=\"70%\" height=\"70%\" src=\"https://user-images.githubusercontent.com/15229355/33068913-a9e7db12-ceaa-11e7-99b1-397f664c9be0.png\">\n</p>\n\n<br>\n\n#### Enforcing HTTPS\n\nHead out to the _Crypto_ tab and change the `SSL` option to `Full`.\n\n<p align=\"center\">\n  <img width=\"90%\" height=\"90%\" src=\"https://user-images.githubusercontent.com/15229355/33068988-e7a1b7ac-ceaa-11e7-9e50-d8e34b34cb98.png\">\n</p>\n\nWe now want to make sure our website is only accessible via HTTPS, to do so go to the _Page Rules_ tab and add the following rule:\n\n<p align=\"center\">\n  <img width=\"100%\" height=\"100%\" src=\"https://user-images.githubusercontent.com/15229355/33068253-8eef832a-cea8-11e7-823f-785e514782f7.png\">\n</p>\n\nThis way, accessing `http://christopherkade.com` will always forward our user to `https://christopherkade.com`.\n\n<br><br>\n\n## Step 2: Changing our nameservers\n\nNow that this is all said and done, when navigating to your overview page, Cloudflare should be asking you the following:\n\n```\nPlease ensure your website is using the nameservers provided:\n- nameserver\n- nameserver\n```\n\nThis is pretty straight forward, we need to head out to [AWS Route 53](https://console.aws.amazon.com/route53/) and change our domain's nameservers.\n\nTo do so, go to the `Registered domains` tab on the left:\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/15229355/33069025-0d14f102-ceab-11e7-8b5a-6edc83e02b44.png\">\n</p>\n\nClick on your domain of choice, then click on `Add or edit name servers` on the right side of the panel. You can now provide the nameservers **given to you by Cloudflare previously**. This change will take a couple of minutes, you will then receive an e-mail by AWS confirming it.\n\nNow that your nameservers have been changed, go back to Cloudflare's overview panel and click on `Recheck Nameservers` (you may do that only once per hour, if you have already done it earlier out of curiosity, patience !).\n\nA short while after, you will receive an e-mail from the Cloudflare team confirming your submission ! Just wait some time, hard refresh your website (Ctrl + f5 on Chrome, Ctrl + R on Firefox) and **voil√†**, you now have your beautiful green lock of trust (on all sub-domains as well !).\n\n<br><br>\n\n## Final thoughts\n\nServing through HTTPS is a norm nowadays, and even though Github pages serves as HTTPS by default for non-custom domains, I found it useful to learn how to do it in all cases.\n\nIt took a lot of research to intertwine these two services, and I hope this post may be of use to at least one of you.\n\nThanks for reading,  \n[@christo_kade](https://twitter.com/christo_kade)\n"},"__N_SSG":true}