{"pageProps":{"frontmatter":{"title":"Understanding Server Side Rendering","description":"Some pros, cons & useful links.","date":"2019-06-07","slug":"/posts/server-side-rendering","isPublished":true},"content":"\n> What is Server Side Rendering (SSR) ?\n\nThat's often a tricky question for a lot of people, where answers range from \"it's good for static websites\" to \"I used it for my blog\". But what is it **really**? Let's cover that together, including its pros & cons and some useful links.\n\n## What is Server Side Rendering?\n\nBefore we dive head-first into an explanation, let's briefly recap the current context for a lot of modern web applications.\n\n### Single Page Applications (SPA)\n\nIn our current web ecosystem, with our multitude of Front-End libraries and frameworks, a server will often respond with something like this when requested a page:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n    <title>React App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"/app.js\"></script>\n  </body>\n</html>\n```\n\nWhere the `<div id=\"root\"></div>` element will have pages injected into it using Javascript as the user navigates through the application.\n\nThis implies that all of the website's Javascript needs to be downloaded to the browser before being able to display anything. Meaning that a slow internet connection could have a great impact on the initial load time of your application. But, once loaded, the subsequent pages load fast and the website can be super interactive.\n\n### Server Side Rendering (SSR)\n\nOn the other hand, when navigating to the same page, a server-rendered approach would have the server send your browser a readable HTML file with the page's content. When you'd navigate to another page, the same process would occur again.\n\n![ssr diagram](https://user-images.githubusercontent.com/15229355/59100904-a9fa6500-8927-11e9-9470-a82a348a2249.png)\n\n## Why should I use it?\n\nThere are many advantages to SSR, to name just a few:\n\n### üîé Better SEO\n\nGoogle's crawlers have a limited capacity to execute Javascript for a website before indexing it, meaning that the content of your page might have trouble being referenced. SSR on the other hand renders the page fully, meaning better SEO all around.\n\n### üèé Faster first meaningful paint\n\nAs stated earlier, SSR won't have you download the website's Javascript fully, meaning a faster initial load speed. Which is great for individuals with older hardware or slower connections. Depending on your target audience this may be an important factor.\n\n### ‚úÖ Great for static websites\n\nSSR is great for websites that are static, such as blogs, documentation, portfolios and landing pages where interactivity is usually limited.\n\n### üë• Social media optimization\n\nWhenever someone shares your application on Facebook or Twitter, a preview of it will be displayed, including a title, description and an image.\n\n## Any drawbacks?\n\nOf course there are some drawbacks, it all depends on the type of application you're developing.\n\n### üìà More server requests\n\nEach new page requires a new server request. Although these are short and usually lightweight, it's important to keep it in mind.\n\n### üêå Slower page rendering\n\nSPAs injects and renders each page faster as the Javascript is initially loaded when accessing the website for the first time. Since SSR fetches the whole page, the rendering will be somewhat slower.\n\n### üïπ Less interactivity\n\nImagine if Trello or Gmail were using SSR, you'd have to reload the page completely at each user interaction, which impacts the overall experience.\n\n## Useful links\n\nHere are some of my recommended links:\n\nTo build Vue.js server-rendered applications: [Nuxt.js](https://nuxtjs.org/).  \nTo build React server-rendered applications: [Gatsby.js](https://www.gatsbyjs.org/), [Next.js](https://nextjs.org/).  \nThis great [explanation](https://youtu.be/GQzn7XRdzxY?t=46) of SSR by the Firebase team.\n\nI hope you enjoyed this article and learned a couple of things along the way.\n\nFeel free to follow me on Twitter [@christo_kade](https://twitter.com/christo_kade) for any updates on my future articles. I also share a lot of interesting stuff about JS & CSS overall ‚ú®\n"},"__N_SSG":true}