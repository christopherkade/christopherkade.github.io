{"data":{"markdownRemark":{"id":"efcbfa2b-af82-5f72-8fa2-58729ee3ef56","html":"<p>Implementing internationalization (commonly known as <code class=\"language-text\">i18n</code>) is often feared by a lot of Front-End developers. Setting it up, adding new languages on the fly &#x26; UX are often main concerns when it comes to it. </p>\n<p>Thankfully, <a href=\"https://nuxtjs.org\">Nuxt.js</a> makes the whole process extremely easy. In this short post, I’ll cover how to set up i18n for a Nuxt application, step by step.</p>\n<p>The finished product can be found on Codesandbox <a href=\"https://codesandbox.io/s/nuxt-i18n-example-sppzc\">here</a>.</p>\n<h3 id=\"step-1-installing-vue-i18n-and-setting-it-up\"><a href=\"#step-1-installing-vue-i18n-and-setting-it-up\" aria-label=\"step 1 installing vue i18n and setting it up permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Installing <code class=\"language-text\">vue-i18n</code> and setting it up</h3>\n<p>We’ll use the well known <a href=\"https://github.com/kazupon/vue-i18n\">vue-i18n</a> package to handle internationalization.</p>\n<p>Start by installing it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Using npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-i18n\n\n<span class=\"token comment\"># Using yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> vue-i18n </code></pre></div>\n<p>Then, define it as a plugin in our configuration file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// nuxt.config.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"~/plugins/i18n.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We now need to create the aforementioned <code class=\"language-text\">i18n.js</code> file that will configure our plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// plugins/i18n.js</span>\n\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> VueI18n <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-i18n\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Tell Vue to use our plugin</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueI18n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Set the i18n instance on app</span>\n  <span class=\"token comment\">// This way we can use it globally in our components through this.$i18n</span>\n  app<span class=\"token punctuation\">.</span>i18n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueI18n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Set the initial locale</span>\n    locale<span class=\"token punctuation\">:</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Set the fallback locale in case the current locale can't be found</span>\n    fallbackLocale<span class=\"token punctuation\">:</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Associate each locale to a content file    </span>\n    messages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      en<span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/static/content-en.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      fr<span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/static/content-fr.json\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Don’t forget to create your <code class=\"language-text\">json</code> files that will contain your textual values for each language. In our case, we could have:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// static/content-en.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, how are you?\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// static/content-fr.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bonjour, comment allez-vous?\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ll be able to access each one of these values in our components like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Will return the correct string based on the current locale</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"step-2-changing-our-locale-on-the-fly\"><a href=\"#step-2-changing-our-locale-on-the-fly\" aria-label=\"step 2 changing our locale on the fly permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Changing our locale on the fly</h3>\n<p>All we have to do is update the <code class=\"language-text\">i18n</code> context object’s <code class=\"language-text\">locale</code> attribute when we need to change the language.</p>\n<p>Here’s a method that takes care of it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">changeLanguage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lang</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token comment\">// Change the i18n context object's locale</span>\n  <span class=\"token comment\">// This makes it so the correct locale file is used</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$i18n<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> lang<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here’s this method used in the context of a component:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>{{ title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeLanguage('en')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>EN<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>       \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeLanguage('fr')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>FR<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this.$t(\"title\") returns the value of our title attribute in our JSON file</span>\n      <span class=\"token comment\">// The correct file is selected based on the locale value</span>\n      <span class=\"token comment\">// If it was an object, we could access its attributes like so: this.$t(\"myObject\").myAttribute</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Called when a language button is clicked\n     * Changes the i18n context variable's locale to the one selected\n     */</span>\n    <span class=\"token function\">changeLanguage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lang</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$i18n<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> lang<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"step-3-wait-theres-no-step-3\"><a href=\"#step-3-wait-theres-no-step-3\" aria-label=\"step 3 wait theres no step 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Wait, there’s no step 3?</h3>\n<p>Yeah, that’s pretty much all you need to know to handle i18n in a Nuxt application.<br>\nOf course, there are many ways of customizing your user experience as can be seen in the official <a href=\"https://kazupon.github.io/vue-i18n/introduction.html\">documentation</a>.</p>\n<p>I hope this has helped some of you figure our i18n in the context of your Nuxt projects.<br>\nFeel free to follow me to get a heads up on any future articles I’ll write about Javascript, React, Vue &#x26; CSS.</p>\n<p><a href=\"https://twitter.com/christo_kade\">Twitter</a> is definitely the best place to see what I have to share on a daily basis, so feel free to 👋 at me there.</p>","fields":{"slug":"/posts/nuxt-i18n","tagSlugs":["/tag/vue/","/tag/javascript/"]},"frontmatter":{"date":"2019-06-11","description":"","tags":["Vue","Javascript"],"title":"Adding internationalization to your Nuxt.js applications"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/nuxt-i18n"}}