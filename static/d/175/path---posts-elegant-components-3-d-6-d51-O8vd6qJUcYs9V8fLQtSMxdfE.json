{"data":{"markdownRemark":{"id":"2a7e40ab-0439-5c40-b1d8-0c5c64beda1b","html":"<p>As a Front-end developer, building resilient and reusable components is a top priority of mine, and there are so many arguments in favor of well thought out components.  </p>\n<p>Thankfully, most of today‚Äôs UI libraries and frameworks go a long way to help you build the best components possible for your projects (and more importantly, for your team). Nevertheless, keeping a few guidelines in mind can help us avoid pitfalls, especially when it comes to large-scale applications.</p>\n<p>In this article, we‚Äôll go through concepts I follow everyday that are <strong>library and framework agnostic</strong>, meaning they apply to UI components as a whole.</p>\n<ol>\n<li><a href=\"#have-a-modular-approach\">Have a modular approach</a></li>\n<li><a href=\"#name-your-components-well\">Name your components well</a></li>\n<li><a href=\"#keep-your-props-simple\">Keep your props simple</a></li>\n<li><a href=\"#keep-your-business-logic-in-container-components\">Keep your business logic in container components</a></li>\n</ol>\n<h2 id=\"have-a-modular-approach\"><a href=\"#have-a-modular-approach\" aria-label=\"have a modular approach permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Have a modular approach</h2>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/4qcceiqmxrsbh9tfewod.png\"></p>\n<p>Ideally, your components should follow the <a href=\"https://addyosmani.com/first/\">FIRST</a> principle:</p>\n<ul>\n<li><strong>F</strong>ocused: one component, one responsibility, if a component is doing too much, ask yourself if you can extract that logic somewhere.</li>\n<li><strong>I</strong>ndependent: ideally, a component should not depend on another one to function. Passing simple and straight to the point props can help you create independent elements. If you‚Äôve ever used <a href=\"https://storybook.js.org\">Storybook</a>, think of it that way: <em>Can I extract this component into a story easily?</em>.</li>\n<li><strong>R</strong>eusable: UI components are lego bricks, they should fit anywhere pretty easily. Once again, a component‚Äôs reusability is often determine by the simplicity of its props (more on that topic later).</li>\n<li><strong>S</strong>mall: I was horrified to see components reaching the 1000 lines mark on a project I‚Äôm currently consulting on. Keep üëè them üëè small. A small component can be read and explained easily and is simpler to test.</li>\n<li><strong>T</strong>estable: <em>How much mocking is required to test this component?</em> is usually a good question to ask yourself, complex components will require a complex context to mock beforehand. Keeping in mind that the easiest components to test are known as <em>pure components</em>, meaning that for a given input, the component will always render the same output, produces <strong>no side effects</strong> and relies on no external mutable states.</li>\n</ul>\n<p>Of course, you‚Äôll be working on elements that are truly dependant on your business logic, meaning you probably won‚Äôt be able to follow these guidelines completely, <strong>and that‚Äôs okay</strong>. Some components aren‚Äôt meant to be reusable and some components won‚Äôt be independent; but keeping this principle in mind is a good start.</p>\n<h2 id=\"name-your-components-well\"><a href=\"#name-your-components-well\" aria-label=\"name your components well permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Name your components well</h2>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/ba521gikvx8pp7r0e9xx.png\"></p>\n<p>I tend to try and keep my component names <strong>short</strong>, <strong>meaningful</strong> and <strong>easy to pronounce</strong>.</p>\n<p>Here are some good and bad examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Good --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user-button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user-button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>payment-details</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>payment-details</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user-card</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user-card</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- Bad --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user-btn</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user-btn</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- hard to pronounce --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user-guarantee-payment-tab</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user-guarantee-payment-tab</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- too long --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ui-dropdown</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ui-dropdown</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- every component is a UI element, no need to mention it --></span></code></pre></div>\n<h2 id=\"keep-your-props-simple\"><a href=\"#keep-your-props-simple\" aria-label=\"keep your props simple permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keep your props simple</h2>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/8m2zuyuos3rungws1pmm.png\"></p>\n<p>As mentioned in the first tip, props can make or break a component.</p>\n<ul>\n<li>Avoid passing down complex object structures, favour individual attributes as props whenever possible</li>\n<li>Use simple names for your props. We should be able to understand its purpose (even partially) upon reading it </li>\n</ul>\n<p>Basically, <strong>try using Javascript primitives</strong> (strings, numbers, booleans) and functions as props whenever possible.</p>\n<h2 id=\"keep-your-business-logic-in-container-components\"><a href=\"#keep-your-business-logic-in-container-components\" aria-label=\"keep your business logic in container components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keep your business logic in container components</h2>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/6vnhey8xbr6upppmvs2h.png\"></p>\n<p><strong>Container components</strong> (such as layouts) should take care of computation and business logic as a whole in order to pass its results as props to <strong>presentational components</strong>.</p>\n<blockquote>\n<p>This pattern isn‚Äôt always valid, but the idea it promotes is important to keep in mind: complex and stateful logic is easier to maintain when kept separate. In the case of a React application for example, this business logic can be extracted in a custom hook, so this ‚Äúsmart/dumb‚Äù component pattern really is about separation of concern.</p>\n</blockquote>\n<p>Often times, having each component handle their own logic can lead to them being hard to re-use throughout your application as they will be bound to a specific context.</p>\n<h2 id=\"dont-overdo-it\"><a href=\"#dont-overdo-it\" aria-label=\"dont overdo it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don‚Äôt overdo it</h2>\n<p>These are just general tips for building efficient components. Of course, each project has different requirements and may not allow for you to follow these guidelines all the time.  </p>\n<p>As Dan Abramov says in his <a href=\"https://overreacted.io/writing-resilient-components/\">Writing Resilient Components</a> article: <em>Don‚Äôt Get Distracted by Imaginary Problems</em>. Keep in mind that it‚Äôs not worth it to over-engineer all of your components and to enforce rules that may not bring meaningful differences.</p>\n<p>I hope this short list will help some of you build better UI components in your day-to-day. As always, if you have any questions, tweet at me <a href=\"http://twitter.com/christo_kade\">@christo_kade</a> ‚ù§Ô∏è</p>","fields":{"slug":"/posts/elegant-components","tagSlugs":["/tag/tutorial/","/tag/javascript/","/tag/web/"]},"frontmatter":{"date":"2019-08-06","description":"","tags":["Tutorial","Javascript","Web"],"title":"Writing elegant and resilient UI components"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/elegant-components"}}