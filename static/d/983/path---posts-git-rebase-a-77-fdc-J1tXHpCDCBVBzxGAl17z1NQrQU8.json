{"data":{"markdownRemark":{"id":"f88652e2-544a-563f-9956-330ffe656c30","html":"<br>\n<blockquote>\n<p>This post is aimed for people who want to learn how to use commands such as rebase &#x26; learn a few tricks to have a nicer Git experience.</p>\n</blockquote>\n<br>\n<p>Alright, let‚Äôs start by watching the Git history of some of my first ever projects on Github:</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/7vpkyr2vbo9ua1ymfmiy.png\" alt=\"git history 01\"></p>\n<blockquote>\n<p>Oh no</p>\n</blockquote>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/21t7daye6xhkfhnnzc1v.png\" alt=\"git history 02\"></p>\n<blockquote>\n<p>Oh no no no no</p>\n</blockquote>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/a68jim387s5o3v224dlr.png\" alt=\"git history 03\"></p>\n<blockquote>\n<p>OH LORD WHAT HAVE I DONE</p>\n</blockquote>\n<p>Now that I‚Äôve ridiculed myself, let‚Äôs check out what most of my projects look like now üòÑ</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/66wi8w9kdgl8x6m6ru4o.png\" alt=\"git history 04\"></p>\n<blockquote>\n<p>Oof, much better</p>\n</blockquote>\n<br>\n<p>If you don‚Äôt know what this all means, let me explain briefly:</p>\n<p>This is a representation of your Git history on Github, meaning the commits you‚Äôve done over time on your project‚Äôs branches. </p>\n<blockquote>\n<p>You can see your own by navigating to the ‚ÄúInsights‚Äù tab of one of your projects, then going to the ‚ÄúNetwork‚Äù tab on the left.  </p>\n</blockquote>\n<p>The black bar represents my <code class=\"language-text\">master</code> branch and each alternating blue &#x26; green bars are separate branches.<br>\nAs you can see on the more recent and nicer history, they alternately get merged into master, creating this nice flow of writing code &#x26; merging it (which is always recommended, instead of accumulating pull requests).</p>\n<p>So, how can you have a cleaner history? Let‚Äôs go over real use-cases.</p>\n<p>Here‚Äôs what we‚Äôre covering today (make sure to do each section in order):</p>\n<ul>\n<li>\n<p><a href=\"#the-magic-of-git-rebase\">Rebasing</a></p>\n<ul>\n<li><a href=\"#example-1-fixing-up-a-commit-with-rebase\">Fixing up a commit</a></li>\n<li><a href=\"#example-2-dropping-a-commit\">Dropping a commit</a></li>\n<li><a href=\"#example-3-rewording-a-commit\">Renaming a commit</a></li>\n<li><a href=\"#example-4-rebasing-on-master\">Rebasing on master</a></li>\n</ul>\n</li>\n<li><a href=\"#bonus-a-better-git-log\">Getting a better git log</a></li>\n</ul>\n<h2 id=\"the-magic-of-git-rebase\"><a href=\"#the-magic-of-git-rebase\" aria-label=\"the magic of git rebase permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The magic of <code class=\"language-text\">git rebase</code></h2>\n<p><a href=\"https://git-scm.com/docs/git-rebase\">Official documentation</a></p>\n<p>Git rebase lets your remodel your history to your will. See it as a way to manipulate your list of commits on a given branch.<br>\nFor example, you could drop commits completely (basically say goodbye to them in the abyss of git), rename them (rewriting your commit message), squash them into other commits (which is useful to hide commits that do small things such as adding a semicolon, you don‚Äôt really want to see them in your history) and many more things.</p>\n<h3 id=\"learning-by-practice\"><a href=\"#learning-by-practice\" aria-label=\"learning by practice permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learning by practice</h3>\n<p>Go to the following <a href=\"https://github.com/christopherkade/up-your-git-game\">project</a> I made for the occasion, <strong>fork it</strong> and let‚Äôs get started.</p>\n<p>Forking is basically creating a copy of my project for yourself, you‚Äôll be able to mess around with it without any problems ! To do it, click on the fork button on the top right:</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/1plindfnefqldmifa3b3.png\" alt=\"fork button\"></p>\n<p>Then, clone the repository you forked.</p>\n<h2 id=\"example-1-fixing-up-a-commit-with-rebase\"><a href=\"#example-1-fixing-up-a-commit-with-rebase\" aria-label=\"example 1 fixing up a commit with rebase permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 1: fixing up a commit with rebase</h2>\n<p><strong>Scenario</strong>: you have committed something that does not deserve a commit of its own, or you want to reduce the number of commits on your branch to one before making a pull request.</p>\n<ul>\n<li>\n<p>From the <code class=\"language-text\">master</code> branch, create a new branch.</p>\n</li>\n<li>\n<p>Create a new file, its content doesn‚Äôt really matter.</p>\n</li>\n<li>\n<p>Commit that new file to your branch.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> index.js\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"add index.js\"</span></code></pre></div>\n<ul>\n<li>\n<p>Update something in that file</p>\n</li>\n<li>\n<p>Commit it again with a message such as ‚Äúupdate index.js‚Äù</p>\n</li>\n<li>\n<p>Run <code class=\"language-text\">git log</code>, as you can see, we now have 2 commits</p>\n</li>\n</ul>\n<p>We now want to <code class=\"language-text\">fixup</code> the <code class=\"language-text\">update</code> commit into the <code class=\"language-text\">add</code> commit, because this small change does not deserve a commit of its own.</p>\n<p>To do so, we‚Äôll use the <strong>interactive</strong> mode of <code class=\"language-text\">git rebase</code>, which lets us apply the rebasing with a nice interface.</p>\n<ul>\n<li>Run the rebase command like so:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase -i HEAD~2</code></pre></div>\n<p><code class=\"language-text\">HEAD~2</code> means start from the last commit on the branch (the head) and go back 2 commits. If we wanted to manipulate more commits, we could change the value to the far right.<br>\nYou should now have an interface that looks something like this:</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/h4po6e92b0icvrpki9sz.png\" alt=\"rebase interactive\"></p>\n<p>Don‚Äôt panic, this only shows you the two commits you are changing at the top, and the available commands bellow them.<br>\nBy default, the rebase interface uses Vim, to write in it, simply press the <strong>i</strong> key. You are now in <strong>‚ÄúINSERT‚Äù</strong> mode. As we want to fixup the second commit in the first one, all we have to do is write <code class=\"language-text\">fixup</code> or <code class=\"language-text\">f</code> instead of <code class=\"language-text\">pick</code> in front of it. Our <code class=\"language-text\">update index.js</code> commit will now be squashed into the <code class=\"language-text\">add index.js</code> but only the <code class=\"language-text\">add index.js</code>‚Äôs message will be kept.</p>\n<ul>\n<li>Update the second line like so:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pick c0091ec <span class=\"token function\">add</span> index.js\nf a19336e update index.js</code></pre></div>\n<p>Now, we want to apply the rebase, press <strong>escape</strong> to leave the <strong>INSERT</strong> mode, press <strong>:</strong> (colon) and enter <strong>wq</strong> for ‚Äúwrite‚Äù and ‚Äúquit‚Äù and press <strong>ENTER</strong> to apply these changes. The colon simply allows you to write commands for Vim to execute. </p>\n<p>The following message should now appear in your console:</p>\n<blockquote>\n<p>Successfully rebased and updated refs/heads/{YOUR BRANCH NAME}.</p>\n</blockquote>\n<p>Check your <code class=\"language-text\">git log</code>, you now have one beautiful and clean commit !</p>\n<ul>\n<li>Finally, force push to that branch to apply the rebase to the remote server</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin <span class=\"token punctuation\">{</span>BRANCH-NAME<span class=\"token punctuation\">}</span> -f</code></pre></div>\n<p>The <code class=\"language-text\">-f</code> is essential as a rebase modifies your git history and requires to be forced.</p>\n<h2 id=\"example-2-dropping-a-commit\"><a href=\"#example-2-dropping-a-commit\" aria-label=\"example 2 dropping a commit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 2: dropping a commit</h2>\n<p>These next 2 steps will be extremely similar to the first one because you now have the tools to do any kind of rebasing üéâ</p>\n<p><strong>Scenario</strong>: you want to completely remove a commit</p>\n<p>We‚Äôll drop the <code class=\"language-text\">add FILENAME</code> commit we previously made:</p>\n<ul>\n<li>Run the rebase command</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase -i HEAD~1</code></pre></div>\n<ul>\n<li>Add a <code class=\"language-text\">d</code> or <code class=\"language-text\">drop</code> in front of the commit you wish to drop.</li>\n</ul>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/nl7wqia23khpgf7by6jf.png\" alt=\"rebase drop\"></p>\n<ul>\n<li>\n<p>Run <code class=\"language-text\">:wq</code> in your Vim editor (and check with <code class=\"language-text\">git log</code> that the commit was dropped)</p>\n</li>\n<li>\n<p>Don‚Äôt forget to force push it to your remote server üòÄ</p>\n</li>\n</ul>\n<h2 id=\"example-3-rewording-a-commit\"><a href=\"#example-3-rewording-a-commit\" aria-label=\"example 3 rewording a commit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 3: rewording a commit</h2>\n<p>Pretty similar, with one change.</p>\n<p><strong>Scenario</strong>: you want to fix a typo or rewrite a commit‚Äôs title or description</p>\n<ul>\n<li>Create a random commit</li>\n</ul>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/o88cmcyqj1596f52gyiy.png\" alt=\"git reword\"></p>\n<ul>\n<li>Run the rebase command</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase -i HEAD~1</code></pre></div>\n<ul>\n<li>\n<p>Add a <code class=\"language-text\">r</code> or <code class=\"language-text\">reword</code> in front of the commit you wish to reword (no need to edit the title now).</p>\n</li>\n<li>\n<p>Run <code class=\"language-text\">:wq</code> in your Vim editor. This will open a similar editor with the commit(s) you wish to reword.</p>\n</li>\n</ul>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/ou14d5c0l0wisqix9wr2.png\" alt=\"git reword 2\"></p>\n<ul>\n<li>Update the commit‚Äôs title and description to your will, run <code class=\"language-text\">:wq</code> and that‚Äôs it ! Check with <code class=\"language-text\">git log</code> that the rewording was applied</li>\n</ul>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/b1o6v4ichuc69ruig868.png\" alt=\"git reword 3\"></p>\n<ul>\n<li>Don‚Äôt forget to force push it to your remote server üòÄ</li>\n</ul>\n<h2 id=\"example-4-rebasing-on-master\"><a href=\"#example-4-rebasing-on-master\" aria-label=\"example 4 rebasing on master permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 4: rebasing on <code class=\"language-text\">master</code></h2>\n<blockquote>\n<p>This example isn‚Äôt reproduced in the Github project, but feel free to test it out.</p>\n</blockquote>\n<p><strong>Scenario</strong>: you have multiple PRs (Pull Requests) open at the same time</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/ja8pn2wr7pl39yhaxf76.png\" alt=\"rebase master screenshot\"></p>\n<p>You merge one PR, now, your second PR is not up to date with <code class=\"language-text\">master</code>, oh no !</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/bl9r2aajzi2384qa4f9n.png\" alt=\"rebase master screenshot 2\"></p>\n<p>This very frequent scenario will have us rebase our second PR on <code class=\"language-text\">master</code> so that it gets the new code merged from the first PR.</p>\n<ul>\n<li>From the branch you want to rebase (in our case, the second PR‚Äôs branch), run the following:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> fetch</code></pre></div>\n<p>This downloads all the references our branch needs to apply the rebase. </p>\n<ul>\n<li>Then, execute the rebase like so:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase origin/master</code></pre></div>\n<ul>\n<li>Finally, run a <code class=\"language-text\">git push origin {MY-BRANCH} -f</code> to apply the rebase to our remote server</li>\n</ul>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/m220k16b638zl42xaqbo.png\" alt=\"rebase master screenshot 3\"></p>\n<blockquote>\n<p>Hurray !</p>\n</blockquote>\n<h2 id=\"bonus-a-better-git-log\"><a href=\"#bonus-a-better-git-log\" aria-label=\"bonus a better git log permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bonus: a better <code class=\"language-text\">git log</code></h2>\n<p>Is your <code class=\"language-text\">git log</code> too much to handle? </p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/pynf7hsq5tgdl43jr5ba.png\" alt=\"git log screenshot\"></p>\n<p>Would you rather have a <code class=\"language-text\">git log</code> that is straight to the point and looks nicer?</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/9k0v35fvzng378m4vftg.png\" alt=\"git log screenshot 2\"></p>\n<p>Look no further ! Here‚Äôs how you can achieve it, in your console, paste the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global alias.lg <span class=\"token string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit\"</span></code></pre></div>\n<p>You‚Äôve now created an alias to git log called <code class=\"language-text\">git lg</code> that will display the nicer output showed before. Try it out by typing <code class=\"language-text\">git lg</code> (or <code class=\"language-text\">git lg -p</code> to see the lines that have changed).</p>\n<blockquote>\n<p>Thanks to <a href=\"https://coderwall.com/p/euwpig/a-better-git-log\">Coderwall</a> for this bonus ‚ú®</p>\n</blockquote>\n<h2 id=\"closing-thoughts\"><a href=\"#closing-thoughts\" aria-label=\"closing thoughts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing thoughts</h2>\n<p>Learning how to use Git is probably one of the most important skills we can acquire as developers. I hope some of you won‚Äôt be as afraid of <code class=\"language-text\">rebase</code> as I was a while ago.</p>\n<p>If this post has been helpful, please feel free to follow me on Twitter <a href=\"https://twitter.com/christo_kade\">@christo_kade</a> !</p>","fields":{"slug":"/posts/git-rebase","tagSlugs":["/tag/tutorial/","/tag/git/"]},"frontmatter":{"date":"2019-06-18","description":"Rebase & a few tricks","tags":["Tutorial","Git"],"title":"Up your Git game and clean up your history"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/git-rebase"}}