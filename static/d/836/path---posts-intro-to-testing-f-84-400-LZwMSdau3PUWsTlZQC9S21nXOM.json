{"data":{"markdownRemark":{"id":"68794da7-eec8-5050-ac35-884ad651afa7","html":"<p>Alright, you‚Äôve dabbled with web developments, made a few projects here and there, deployed a few applications that helped you grasp essential concepts of Front-End development, from routing, server-side rendering, state-management to asynchronous queries etc.    </p>\n<p>But there‚Äôs one thing you haven‚Äôt put to practice, either because you were willingly avoiding it, or simply because you didn‚Äôt see its use: testing. More specifically, Front-End unit testing, one <em>very important</em> part of the testing ecosystem.</p>\n<h2 id=\"unit-testing-üßê\"><a href=\"#unit-testing-%F0%9F%A7%90\" aria-label=\"unit testing üßê permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit testing? üßê</h2>\n<p>I‚Äôll just go over the basic knowledge to understand the role of unit testing in your everyday applications.<br>\nEssentially, testing Front-End code can be divided into <strong>3 categories</strong>:</p>\n<img style=\"max-width: 100%\" src=\"https://user-images.githubusercontent.com/15229355/55113335-24fcff00-50df-11e9-87e8-cdd5e0e6ad3f.png\">\n<p><strong>E2E Testing</strong> or end-to-end testing, is the practice of testing if the execution of an application is performing as designed from start to finish. The entire application is tested in real-world scenarios, which includes testing the communication between components such as the database, network, APIs etc. and executing your code in a diversity of browsers. Basically testing everything. It takes a lot of time to set up and costs the most.</p>\n<p><strong>Integration Testing</strong> consists of testing the interaction between elements of your application, for example, communication between your UI and an API. It takes a shorter amount of time to set up, and isn‚Äôt too expensive.</p>\n<p><strong>Unit Testing</strong> is different as it consists of testing isolated parts of the code, as units. These units usually take the form of methods, properties, UI element actions etc. It is the fastest and cheapest to implement.</p>\n<p>You‚Äôve probably noted that the higher you go in our pyramid, the more time and money it takes to set up our tests. That‚Äôs why a lot of projects tend to focus on unit tests as they can help you know if your code truly works by covering most scenarios, save time, and simplify deployment processes.</p>\n<br>\n<br>\n<h2 id=\"example-of-a-unit-test-Ô∏è\"><a href=\"#example-of-a-unit-test-%EF%B8%8F\" aria-label=\"example of a unit test Ô∏è permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example of a unit test ‚öôÔ∏è</h2>\n<p>Before we get into it, it‚Äôs worth mentioning what a testing framework is.</p>\n<p>A testing framework allows you to easily set up your testing environment and run test suites. You could see testing frameworks as what React or Vue are to UI development, they give you a multitude of tools and make your life easier by doing so.<br>\nI would immensely recommend <a href=\"https://jestjs.io/\">Jest</a> as it is commonly seen on most projects and is maintained by a great team of engineers at Facebook. Note that I will be using this framework in my examples.</p>\n<p>I‚Äôll be covering a few basic examples of unit tests, so let‚Äôs get to it. If you want to follow along, feel free to use a website called <a href=\"http://tddbin.com/\">TDDBin</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. The method we want to test</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. A test suite</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add method\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 3. A unit test</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 4. An assertion</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let‚Äôs break down the code:</p>\n<ol>\n<li><strong>The method we want to test</strong>. As we noted earlier, unit testing often applies to methods or UI element interactions. A great way to know what to test is to go from the ground up looking at an application‚Äôs components. ‚ÄúWhat does my method take as an input and what is its output?‚Äù, ‚ÄúDoes my method impact my component‚Äôs state?‚Äù, ‚ÄúWhat are the edge cases?‚Äù are all good questions to find a starting point.</li>\n<li><strong>A test suite</strong>, that should be described briefly and groups unit tests that are related. For example, a test suite could include all tests that concern a specific method. You can declare as many test suites as you want, its primary role is to make your test logs more readable.</li>\n<li><strong>A unit test</strong>, accompanied by a description, the statement(s) inside the callback is the test itself.</li>\n<li><strong>A test assertion</strong>. Testing is all about assertions, comparing a given value to an expected one. Here, we give the return value of our <code class=\"language-text\">add</code> method with 1 and 1 as parameters and expect the result to be 2.</li>\n</ol>\n<br>\n<h3 id=\"other-tests-we-could-add\"><a href=\"#other-tests-we-could-add\" aria-label=\"other tests we could add permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other tests we could add</h3>\n<p>Here are some other tests that would be reasonable to add for this example:</p>\n<p>Testing negative results:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return -2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Testing our method‚Äôs error handling (when anything other than a number is passed as parameter):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Check if the parameters are numbers</span>\n  <span class=\"token comment\">// If not, throw an error</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter is not a number !\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add method\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should throw an error if NaN is given as parameter\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><strong>Note</strong>: you may have seen that we used <code class=\"language-text\">toThrow()</code> and not <code class=\"language-text\">toBe()</code>. Jest offers a <a href=\"https://jestjs.io/docs/en/using-matchers\">multitude</a> of matchers to check if a value matches a given result. So you can check if a value is <code class=\"language-text\">null</code>, <code class=\"language-text\">true</code>, greater or less than etc.</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"concrete-example-of-unit-testing-üß™\"><a href=\"#concrete-example-of-unit-testing-%F0%9F%A7%AA\" aria-label=\"concrete example of unit testing üß™ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concrete example of unit testing üß™</h2>\n<p>Alright, I‚Äôve shown a pretty unrealistic example of unit testing, so let‚Äôs try it on a <strong>real</strong> component from start to finish.</p>\n<p>I‚Äôve created a project using <code class=\"language-text\">create-react-app</code>, which comes out-of-the-box with Jest set up. Whatever framework you‚Äôre using, most of their CLIs configure Jest for you, so it‚Äôs just a matter of creating your test files and writing your tests ! If you‚Äôre not using one of those CLIs or just need to configure Jest from scratch, feel free to read up on their <a href=\"https://jestjs.io/docs/en/getting-started.html\">getting started</a> documentation.</p>\n<p>Now, let‚Äôs install <a href=\"https://airbnb.io/enzyme/\">Enzyme</a> which will allow us to test our components‚Äô output by rendering them. Note that there are many well known tools that can be used to test Front-End applications, Jest and Enzyme being some of the most well known.   </p>\n<p>Let‚Äôs follow their introduction documentation by installing the necessary packages:</p>\n<p><code class=\"language-text\">npm i --save-dev enzyme enzyme-adapter-react-16 react-test-renderer</code></p>\n<p>We then need to set up our adapter by creating the following file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// /src/setupTests.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme-adapter-react-16'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> adapter<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>Note</strong>: if you‚Äôre using an older version of React, make sure to configure the right adapter for the version you‚Äôre using, feel free to read up on their <a href=\"https://airbnb.io/enzyme/docs/installation/#installation\">installation</a> documentation.</p>\n</blockquote>\n<p>You may have noted that <code class=\"language-text\">create-react-app</code> creates the following unit test:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// App.spec.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders without crashing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All test files have a similar format: <code class=\"language-text\">*.spec.js</code> or <code class=\"language-text\">*.test.js</code> depending on your preference. I personally always use the first format. üòÑ</p>\n<p>Try it out by running <code class=\"language-text\">npm run test</code> in your console. You should get the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> PASS  src/App.spec.js\n  ‚úì renders without crashing <span class=\"token punctuation\">(</span>2ms<span class=\"token punctuation\">)</span>\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.097s, estimated 1s\nRan all <span class=\"token function\">test</span> suites.</code></pre></div>\n<p>Awesome, we‚Äôve run our first unit test.</p>\n<p>We‚Äôll now build a basic counter application that lets the user click on a button to increase a value on the screen. The source code can be found <a href=\"https://github.com/christopherkade/unit-testing-demo\">here</a> so feel free to clone or fork the repo to try it out.</p>\n<p>Our component looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        counter<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            Click Me <span class=\"token operator\">!</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So where do we start? Ask yourself what aspects of the component we could test, in this case:</p>\n<ul>\n<li>What‚Äôs displayed on the screen initially</li>\n<li>That the counter increases when the user clicks on the button</li>\n</ul>\n<br>\n<h3 id=\"testing-rendered-values\"><a href=\"#testing-rendered-values\" aria-label=\"testing rendered values permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing rendered values</h3>\n<p>Enzyme‚Äôs JQuery-like syntax and Jest‚Äôs assertions make it extremely easy to test these cases, here‚Äôs how we should go about it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n\n<span class=\"token comment\">// 1. Test suite</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[UNIT] Testing the App component\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> wrapper\n\n  <span class=\"token comment\">// 2. A Jest setup helper function  </span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 3. Enzyme's shallow rendering</span>\n    wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Component validation\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token comment\">// 4. Our unit test, checking if the initial value is 0</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'displays 0 as a default value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You probably noticed a couple of things, so let‚Äôs go through the code.</p>\n<ol>\n<li>As we mentioned earlier, Jest allows us to create test suites to organize our tests.</li>\n<li>Sometimes you want to setup something before a test runs or wrap other things after they do. This is why Jest offers setup and teardown helper functions that you can read up on <a href=\"https://jestjs.io/docs/en/setup-teardown\">here</a>. The main one‚Äôs you‚Äôll find yourself using are <code class=\"language-text\">beforeEach</code> and <code class=\"language-text\">beforeAll</code> as they will allow you to render your components, which brings us to number 3.</li>\n<li>Shallow rendering is one of the few rendering methods Enzyme offers. In the case of shallow rendering, we render the component itself <strong>without</strong> its children. This allows you to test the component as a unit, so that if you modify a child it won‚Äôt affect the current component being tested. See Enzyme‚Äôs rendering as an instance of your component as it is when it first comes up on your screen, with its internal states, HTML and all.</li>\n<li>Our first test is simple: we look up the component‚Äôs <code class=\"language-text\">h1</code> title by passing a selector to the <code class=\"language-text\">find</code> method and access its text directly; we then check, using Jest‚Äôs assertion methods, that it contains the value 0. Simple, right?</li>\n</ol>\n<p>Alright, on to our second test.</p>\n<br>\n<h3 id=\"testing-events\"><a href=\"#testing-events\" aria-label=\"testing events permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing events</h3>\n<p>Testing events is made very simple thanks to Enzyme, here‚Äôs how we test that a click to our button increases our counter:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should increase counter when the button is clicked\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We use the <code class=\"language-text\">simulate</code> method on the <code class=\"language-text\">button</code> wrapper to trigger the event and then check our title to see if it is equal to 1.  </p>\n<blockquote>\n<p><strong>Note</strong>: most event types can be simulated using the simulate method including inputs, clicks, focus, blurs, scrolls etc.</p>\n</blockquote>\n<br>\n<h3 id=\"testing-code-coverage\"><a href=\"#testing-code-coverage\" aria-label=\"testing code coverage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing code coverage</h3>\n<p>An important concept to grasp is code coverage, it represents the percentage of your code being tested.  </p>\n<p>Code coverage tools check the following:</p>\n<ul>\n<li>Statements: how many statements of your code are executed.</li>\n<li>Branches: branches created by conditional statements (if/else) that may or may not be executed.</li>\n<li>Functions: the number of functions that have been called.</li>\n<li>Lines: the proportion of lines executed during the tests.</li>\n</ul>\n<p>And could look something like this (based on our previous example):</p>\n<img style=\"max-width: 100%\" src=\"https://user-images.githubusercontent.com/15229355/55360258-1d20ce80-54d4-11e9-9cbc-e08a0e437042.png\">\n<p>One of the most used code coverage tools our there is called <a href=\"https://istanbul.js.org/\">Istanbul</a> and is used by create-react-app to report your application‚Äôs code coverage when you run the following command <code class=\"language-text\">npm run test --coverage</code>.</p>\n<p>Tools like Istanbul generate a code coverage report in the form of HTML files that can help you have an overview of what parts of your code haven‚Äôt been tested. It highlights the specific lines not covered during your unit tests to help you reach that sweet 100% coverage.</p>\n<blockquote>\n<p><strong>Note</strong>: code coverage isn‚Äôt everything and 100% coverage doesn‚Äôt mean you‚Äôve tested every scenario for a given component, so you should only strive to it when it makes sense.<br>\nAs noted by <a href=\"https://twitter.com/edaqa\">@edaqa</a>, code coverage can be seen as a bad metric, as it may ‚Äúprovide a false sense of security by equating lines executed with lines tested‚Äù amongst other problems. So use it with caution as a way to have an overview over how much of your code is covered, and by not confusing a metric with an objective.</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"honorable-mentions-\"><a href=\"#honorable-mentions-\" aria-label=\"honorable mentions  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Honorable mentions üëè</h2>\n<p>Here are some things that I didn‚Äôt talk about that deserve to be mentioned, in no particular order:</p>\n<ul>\n<li>Jest has a <code class=\"language-text\">--watch</code> option that allows to run your tests automatically when a test file is changed.</li>\n<li>A great <a href=\"https://devhints.io/enzyme\">cheatsheet</a> for Enzyme.</li>\n<li>Make sure to check out the files generated during code coverage reports, knowing exactly which lines haven‚Äôt been covered can save tremendous amounts of time.</li>\n<li>Make sure that you‚Äôre testing something that needs to be tested, avoid testing that third-party packages do their job and focus on testing that your component fits your specifications.</li>\n<li>The concept of Test Driven Development (TDD) can be described as follows: ‚ÄúTest-driven development is the act of first deciding what you want your program to do (the specifications), formulating a failing test, then writing the code to make that test pass‚Äù (<a href=\"https://medium.freecodecamp.org/an-introduction-to-test-driven-development-c4de6dce5c\">link</a>), don‚Äôt worry if you don‚Äôt understand it fully right away, but it‚Äôs important to eventually understand its value and to know that you might be asked to  one day practice it. Here‚Äôs a great <a href=\"https://github.com/dwyl/learn-tdd\">starting point</a>.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"closing-thoughts-\"><a href=\"#closing-thoughts-\" aria-label=\"closing thoughts  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing thoughts üéÅ</h2>\n<p>I believe this is enough information for a single introduction to Front-End testing and should get you on your way to learning many, many things about unit testing as a whole.</p>\n<p>Testing may feel like a time-consuming and useless practice to you right now, but believe me, you will eventually realize how relevant testing an application is. It will help you debug and structure your code, save time, reduce technical debt, improve your workflow and overall boost your productivity on the long run.</p>\n<p>As always, thank you so much for taking the time to read this, I hope you‚Äôve learned something along the way. </p>\n<p>If you have any questions please feel free to send them to me on Twitter <a href=\"https://twitter.com/christo_kade\">@christo_kade</a>, and if you enjoyed this post, following me will give you a heads up whenever I upload anything new !</p>","fields":{"slug":"/posts/intro-to-testing","tagSlugs":["/tag/testing/","/tag/javascript/"]},"frontmatter":{"date":"2019-04-01","description":"A good start to your testing journey.","tags":["Testing","Javascript"],"title":"Introduction to Front-End unit testing"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/intro-to-testing"}}