{"data":{"markdownRemark":{"id":"3bcbb069-2ca9-516a-b808-868357b969c5","html":"<p>Whether you are on your own or with a team, having an efficient Git workflow can go a long way to boost your productivity.<br>\nFor the past month, I‚Äôve been consulting with a team that truly values the points I‚Äôll share with you today, and I‚Äôve been able to see the positive effects they‚Äôve had on a large-scale project.</p>\n<p><img src=\"https://images.unsplash.com/photo-1556075798-4825dfaaf498?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=2110&#x26;q=80\"></p>\n<h2 id=\"naming-conventions\"><a href=\"#naming-conventions\" aria-label=\"naming conventions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming conventions</h2>\n<p>Git naming conventions are <strong>key</strong>. They allow you to understand the context of somebody‚Äôs work in a matter of seconds and can help you filter through your team‚Äôs work when well executed.</p>\n<p>There isn‚Äôt a perfect naming convention out there, but some of them, like <a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">Vincent Driessen‚Äôs</a> make a lot of sense and will clarify the mess that can be naming Git branches.<br>\nIn short, other than your usual <code class=\"language-text\">master</code> and <code class=\"language-text\">dev</code> branches, your <em>supporting</em> branches can be of the following types:</p>\n<ul>\n<li><strong>Feature branches</strong> (<code class=\"language-text\">feature-*</code>): takes the form of a user story, or a feature that will be merged later on</li>\n<li><strong>Release branches</strong> (<code class=\"language-text\">release-*</code>): support the preparation of new product release, say a future rebranding of your website and will be eventually merged when ready</li>\n<li><strong>Hotfix branches</strong> (<code class=\"language-text\">hotfix-*</code>): your typical bug fix. You could, for example, branch off in order to fix a bug in production</li>\n</ul>\n<p>But naming conventions also apply to <strong>commit messages</strong>. I truly recommend Chris Beam‚Äôs <a href=\"https://chris.beams.io/posts/git-commit/\">‚ÄúHow to Write a Git Commit Message‚Äù</a> in order to grasp the importance of carefully naming your commits. But I think the following guidelines are a good summary:</p>\n<ul>\n<li>Separate subject from body with a blank line</li>\n<li>Limit the subject line to 50 characters</li>\n<li>Capitalize the subject line</li>\n<li>Do not end the subject line with a period</li>\n<li>Use the imperative mood in the subject line</li>\n<li>Wrap the body at 72 characters</li>\n<li>Use the body to explain what and why vs. how</li>\n</ul>\n<p>A good rule of thumb is to use the sentence: <em>if applied, this commit will‚Ä¶</em> and end it with your commit‚Äôs title. If it makes no sense, you might want to reconsider it.<br>\nFor example: <em>if applied, this commit will remove all deprecated methods</em> sounds great, whereas <em>if applied, this commit will fix bug #123</em> doesn‚Äôt.</p>\n<blockquote>\n<p>Note: if you‚Äôre using a tool such as Jira you could incorporate your ticket numbers in both your branch names and commit messages in order to make it easier to cross check.<br>\nAlso, don‚Äôt forget that these are just tips, and that at the end of the day you can always follow your own path. We‚Äôll all end up with some ‚Äòplease work‚Äô commit messages here and there. üòÑ</p>\n</blockquote>\n<h2 id=\"github-labels\"><a href=\"#github-labels\" aria-label=\"github labels permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Github labels</h2>\n<p>Github labels are another great way of filtering through your pull requests. So here are some labels I‚Äôve found useful in the past and their meaning (when it isn‚Äôt obvious):</p>\n<ul>\n<li><strong>Good first issue</strong>: especially great when your project is open-source and looking for new contributors. It‚Äôs a great entry point for anyone too afraid to help out</li>\n<li><strong>Feature</strong></li>\n<li><strong>Bug</strong></li>\n<li><strong>Tech</strong>: means the associated pull request isn‚Äôt about a client-facing feature. It could be about your project‚Äôs <code class=\"language-text\">eslint</code> or <code class=\"language-text\">storybook</code> configurations for example</li>\n<li><strong>Critical</strong>: helps your team know which PRs are worth reviewing first, especially when on a tight deadline</li>\n<li><strong>Help wanted</strong></li>\n<li><strong>In progress</strong></li>\n<li><strong>XS</strong>, <strong>S</strong>, <strong>M</strong>, <strong>L</strong> and <strong>XL</strong>: represents the size of the PR at a quick glance. It‚Äôs hard to determine how many lines changed will make up for any of these sizes, it‚Äôs all up to you</li>\n<li><strong>Review needed</strong></li>\n<li><strong>Reviewed</strong></li>\n</ul>\n<p>Labels can be changed by clicking on the following link in your pull requests page:</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/cr3l08b0ijqgdlhnj2n5.png\" alt=\"labels link screenshot\"></p>\n<p>It‚Äôs now as simple as clicking on ‚ÄúNew label‚Äù, setting a name, optional description and a color.</p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/sfb9stdlkkea9pasf4pm.png\" alt=\"new label screenshot\"></p>\n<h2 id=\"protecting-git-branches\"><a href=\"#protecting-git-branches\" aria-label=\"protecting git branches permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Protecting Git branches</h2>\n<p>You can limit branch manipulation by, for example, enforcing a required status before merging a given branch. This is great when you‚Äôve set code review rules and don‚Äôt want anyone to mistakenly merge a branch.</p>\n<p>As admin of a project, go to <code class=\"language-text\">Settings</code> => <code class=\"language-text\">Branches</code> => <code class=\"language-text\">Add rule</code> and input the name of the branch you wish to protect.  </p>\n<p>You can chose from a number of rules, including:</p>\n<ul>\n<li>Requiring X pull request reviews before merging</li>\n<li>Requiring status checks to pass before merging, great when you have a robust CI process in place</li>\n</ul>\n<h2 id=\"creating-git-hooks\"><a href=\"#creating-git-hooks\" aria-label=\"creating git hooks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Git hooks</h2>\n<p>I‚Äôll quote the <a href=\"https://githooks.com/\">official docs</a> for this one:</p>\n<blockquote>\n<p>Git hooks are scripts that Git executes before or after events such as <strong>commit</strong>, <strong>push</strong> and <strong>receive</strong>. Git hooks are a built-in feature - no need to download anything.</p>\n</blockquote>\n<blockquote>\n<p>Every Git repository has a .git/hooks folder with a script for each hook you can bind to. You‚Äôre free to change or update these scripts as necessary, and Git will execute them when those events occur.</p>\n</blockquote>\n<p>I‚Äôd recommend using awesome tools such as <a href=\"https://github.com/typicode/husky\">Husky</a> in order to create them easily.</p>\n<p>Automatically executing your tests and blocking a push if they fail will go a <strong>long way</strong> to avoid polluting your git history.</p>\n<h2 id=\"honorable-mentions\"><a href=\"#honorable-mentions\" aria-label=\"honorable mentions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Honorable mentions</h2>\n<p>I‚Äôd like to mention something I use regularaly on personal projects such as <a href=\"https://github.com/christopherkade/foodpicker\">Foodpicker</a>, <a href=\"https://github.com/christopherkade/banner-generator\">Banner Generator</a> or <a href=\"https://github.com/christopherkade/gitignore-it\">Gitignore It</a> (if you‚Äôre curious, check out their Git history): üé® ‚ö°Ô∏è <a href=\"https://gitmoji.carloscuesta.me/\">Gitmoji</a> üî• üêõ! It‚Äôs a way of codifying your commit messages using emojis, this way you can understand the <strong>context</strong> of a commit at a glance. Some might dismiss it right away due to its colorful nature, but I‚Äôve found it very useful to generate changelogs for example.</p>\n<p>Some awesome tools such as <a href=\"https://github.com/carloscuesta/gitmoji-cli\">gitmoji-cli</a> and <a href=\"https://github.com/frinyvonnick/gitmoji-changelog\">gitmoji-changelog</a> make my Git experience smoother on a daily basis, so make sure to check them out if you‚Äôre interested !</p>\n<p>I hope you‚Äôve learned a couple of things reading this article ! As always, I‚Äôd love for you to tweet at me <a href=\"https://twitter.com/christo_kade\">@christo_kade</a> if you have any questions üòÑ<br>\nTake care, and don‚Äôt forget: always rebase locally ‚ù§Ô∏è</p>","fields":{"slug":"/posts/git-workflow","tagSlugs":["/tag/productivity/","/tag/git/"]},"frontmatter":{"date":"2019-08-12","description":"Naming conventions, labels, code reviews and more.","tags":["Productivity","Git"],"title":"Improving your Git workflow"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/git-workflow"}}