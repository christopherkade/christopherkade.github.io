{"data":{"markdownRemark":{"id":"5bb449b6-082c-50d9-a101-e6e9f7cd0e43","html":"<p>After deploying my new web-tool (namely <a href=\"https://snippet.christopherkade.com/\">Snippet</a>) I figured it would be time to finally add SSL to my domain. Even though no data leaves or enters my website, I find the green lock of trust to be reassuring and a norm on the web, and so do most users today.</p>\n<p>I started by <strong>only</strong> using AWS services, but then realized I could cut some costs by using Cloudflare’s free plan.</p>\n<p>In short, I needed:</p>\n<ul>\n<li>Cloudflare</li>\n<li>AWS Route 53</li>\n</ul>\n<p>I had:</p>\n<ul>\n<li>A custom domain working through HTTP</li>\n<li>Custom sub-domains</li>\n</ul>\n<p><br><br></p>\n<h2 id=\"step-1-setting-up-cloudflare\"><a href=\"#step-1-setting-up-cloudflare\" aria-label=\"step 1 setting up cloudflare permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Setting up Cloudflare</h2>\n<p>We’ll be using Cloudflare as our new DNS (coming from AWS Route 53), to use and force HTTPS.</p>\n<p>To do so, head out to <a href=\"https://www.cloudflare.com/\">Cloudflare</a>’s website, create an account and set up your website by providing your domain; in my case <code class=\"language-text\">christopherkade.com</code>.</p>\n<br>\n<h4 id=\"using-cloudflare-as-our-dns\"><a href=\"#using-cloudflare-as-our-dns\" aria-label=\"using cloudflare as our dns permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Cloudflare as our DNS</h4>\n<p>Cloudflare will then scan your existing DNS configurations and display the records they found, in my case, they found most of them, namely my <code class=\"language-text\">A</code> records and one of my sub-domain’s <code class=\"language-text\">CNAME</code> record, like such:</p>\n<p align=\"center\">\n  <img width=\"70%\" height=\"70%\" src=\"https://user-images.githubusercontent.com/15229355/33068859-7d471316-ceaa-11e7-930b-8c19b9e8f5fe.png\">\n</p>\n<p>I then proceeded to add the missing records and most importantly to add a <code class=\"language-text\">CNAME</code> record with <code class=\"language-text\">www</code> as its name and an alias to <code class=\"language-text\">username.github.io</code> as its value. This way, when navigating to <code class=\"language-text\">www.christopherkade.com</code>, you’ll be redirected right away to <code class=\"language-text\">christopherkade.github.io</code>. Here’s the final records:</p>\n<p align=\"center\">\n  <img width=\"70%\" height=\"70%\" src=\"https://user-images.githubusercontent.com/15229355/33068913-a9e7db12-ceaa-11e7-99b1-397f664c9be0.png\">\n</p>\n<br>\n<h4 id=\"enforcing-https\"><a href=\"#enforcing-https\" aria-label=\"enforcing https permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enforcing HTTPS</h4>\n<p>Head out to the <em>Crypto</em> tab and change the <code class=\"language-text\">SSL</code> option to <code class=\"language-text\">Full</code>.</p>\n<p align=\"center\">\n  <img width=\"90%\" height=\"90%\" src=\"https://user-images.githubusercontent.com/15229355/33068988-e7a1b7ac-ceaa-11e7-9e50-d8e34b34cb98.png\">\n</p>\n<p>We now want to make sure our website is only accessible via HTTPS, to do so go to the <em>Page Rules</em> tab and add the following rule:</p>\n<p align=\"center\">\n  <img width=\"100%\" height=\"100%\" src=\"https://user-images.githubusercontent.com/15229355/33068253-8eef832a-cea8-11e7-823f-785e514782f7.png\">\n</p>\n<p>This way, accessing <code class=\"language-text\">http://christopherkade.com</code> will always forward our user to <code class=\"language-text\">https://christopherkade.com</code>.</p>\n<p><br><br></p>\n<h2 id=\"step-2-changing-our-nameservers\"><a href=\"#step-2-changing-our-nameservers\" aria-label=\"step 2 changing our nameservers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Changing our nameservers</h2>\n<p>Now that this is all said and done, when navigating to your overview page, Cloudflare should be asking you the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Please ensure your website is using the nameservers provided:\n- nameserver\n- nameserver</code></pre></div>\n<p>This is pretty straight forward, we need to head out to <a href=\"https://console.aws.amazon.com/route53/\">AWS Route 53</a> and change our domain’s nameservers.</p>\n<p>To do so, go to the <code class=\"language-text\">Registered domains</code> tab on the left:</p>\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/15229355/33069025-0d14f102-ceab-11e7-8b5a-6edc83e02b44.png\">\n</p>\n<p>Click on your domain of choice, then click on <code class=\"language-text\">Add or edit name servers</code> on the right side of the panel. You can now provide the nameservers <strong>given to you by Cloudflare previously</strong>. This change will take a couple of minutes, you will then receive an e-mail by AWS confirming it.</p>\n<p>Now that your nameservers have been changed, go back to Cloudflare’s overview panel and click on <code class=\"language-text\">Recheck Nameservers</code> (you may do that only once per hour, if you have already done it earlier out of curiosity, patience !).</p>\n<p>A short while after, you will receive an e-mail from the Cloudflare team confirming your submission ! Just wait some time, hard refresh your website (Ctrl + f5 on Chrome, Ctrl + R on Firefox) and <strong>voilà</strong>, you now have your beautiful green lock of trust (on all sub-domains as well !).</p>\n<p><br><br></p>\n<h2 id=\"final-thoughts\"><a href=\"#final-thoughts\" aria-label=\"final thoughts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final thoughts</h2>\n<p>Serving through HTTPS is a norm nowadays, and even though Github pages serves as HTTPS by default for non-custom domains, I found it useful to learn how to do it in all cases.</p>\n<p>It took a lot of research to intertwine these two services, and I hope this post may be of use to at least one of you.</p>\n<p>Thanks for reading,<br>\n<a href=\"https://twitter.com/christo_kade\">@christo_kade</a></p>","fields":{"slug":"/posts/ssh-githubpages","tagSlugs":["/tag/tutorial/"]},"frontmatter":{"date":"2017-12-06","description":"The green lock of trust is vital from now on.","tags":["Tutorial"],"title":"Serving your Github pages custom domain using HTTPS"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/ssh-githubpages"}}